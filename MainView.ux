<App>
	<Font File="Assets/FontAwesome.otf" ux:Global="FontAwesome" />
	<Font File="Assets/FontAwesome.ttf" ux:Global="FontAwesome2" />
	<Panel ux:Class="MenuItem" Active="false">
	<string ux:Property="Label" />
	<bool ux:Property="Active" />
</Panel>

	<Page ux:Class="scroller" ux:Name="self" HitTestMode="LocalBoundsAndChildren" Visibility="Visible" TransformOrigin="Center" Color="#443E3E00" Alignment="Default">
		<DockLayout />
			<bool ux:Property="Instructions" />
			
		</Page>
		<iOS.StatusBarConfig Style="Light" />
		<Android.StatusBarConfig Color="#DC4353" />
		<Router ux:Name="router" />
	<JavaScript>
var Observable = require("FuseJS/Observable");
search_field = exports.search_field = Observable("");

loading_visible = exports.loading_visible = Observable("");

issue_data = exports.issue_data = Observable("");
var loadingNewFeed = Observable(true);

var appendingData = Observable(false);
var appendinguserData = Observable(false);

var paginationOffset = 1;
var userpaginationOffset = 1;

api_url = "https://www.bugheist.com/api/v1/"

searchIssues();

function searchIssues(appendData) {
	if (loading_visible.value == true || paginationOffset >= 31)
		return;

	loading_visible.value = true;
	appendingData.value = appendData;

	if (search_field.value) {
		if (appendingData.value == true){
			url = api_url + 'issues/?search=' + search_field.value + '&page=' + paginationOffset;
		}else{
			url = api_url + 'issues/?search=' + search_field.value;
		}
		
	} else {
		url = api_url + 'issues/?page=' + paginationOffset;
	}

	fetch(url , {
			method: 'GET',
			
		}).then(function(response) {
			return response.json();
		})
		.then(function(responseObject) {
			if (appendingData.value == true) {
				issue_data.addAll(responseObject.results);
				appendingData.value = false;
			}else{
				issue_data.replaceAll(responseObject.results); 
			}

			loading_visible.value = false;
			loadingNewFeed.value = false;
			paginationOffset++;
		});
}
desc="";
function LoginPage() {
	router.goto("login");
}

var isDialogShowing = Observable(false);

function showDialog() {
    isDialogShowing.value = true;
}

function closeDialog() {
    isDialogShowing.value = false;
}
var noConnection = Observable();
module.exports = {
	search_field: search_field,
	loadingNewFeed: loadingNewFeed,
	searchIssues: searchIssues,
	dataSource: issue_data,
	LoginPage: LoginPage,
    isDialogShowing: isDialogShowing,
    showDialog: showDialog,
    closeDialog: closeDialog,
    noConnection: noConnection,
	fetchAppendData: function() {
		searchIssues(true)
	},
	goBack: function() {
		router.goBack();
	}

};
fetch('http://example.com', {

		}).then(function(response) {

		}).then(function(responseObject) {

		}).catch(function(error) {
			console.log("No internet connection");
			noConnection.value = true;
		});

</JavaScript>
		<WhileFalse	Value="{noConnection}">
		<Navigator DefaultPath="home">
			<LoginPage ux:Template="login" router="router" />
			<HomePage ux:Template="home" router="router" />
		</Navigator>
	</WhileFalse>
	<WhileTrue Value="{noConnection}">
		<StackPanel Alignment="Center">
			<Text Value="No internet connection" />
		</StackPanel>
	</WhileTrue>
	
</App>